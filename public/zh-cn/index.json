[{"categories":null,"content":"dmx\r","date":"2021-12-31","img":"","permalink":"/zh-cn/blogs/matt/","series":null,"tags":null,"title":"Matt"},{"categories":null,"content":"dmx\nhello word\n","date":"2021-12-31","img":"","permalink":"/zh-cn/posts/new-post/","series":null,"tags":null,"title":"杜明轩"},{"categories":["菜单"],"content":"我们预定义了两种类型的菜单：main 和 footer，分别表示顶部的应用程序栏菜单和页脚菜单。 本文将简要介绍如何使用菜单。\n菜单项属性\r   属性 类型 描述     name String 菜单名称。   identifier String 菜单 ID。   weight Number 菜单的权重，用于升序排序。   parent String 上级菜单的 identifier。   url String 菜单的 URL。   pre String 菜单名称的前置字符串。   post String 菜单名称的拖尾字符串。   params Object 菜单参数。   params.divider Boolean true 表示分隔符。    请参阅 Menu Entry Properties\r。\n用法\r配置\r 菜单配置文件默认放在 config/_default/menu.toml。\n 让我们以 main 菜单为例：\n1[[main]] 2 name = \u0026#34;FooBar\u0026#34; 3 identifier = \u0026#34;foobar\u0026#34; 4 weight = 1 5 pre = \u0026#39;\u0026lt;i class=\u0026#34;fas fa-fw fa-chevron-circle-down\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026#39; 6[[main]] 7 name = \u0026#34;Foo\u0026#34; 8 identifier = \u0026#34;foo\u0026#34; 9 parent = \u0026#34;foobar\u0026#34; 10 url = \u0026#34;https://github.com/razonyang/hugo-theme-bootstrap\u0026#34; 11 weight = 1 12[[main]] 13 parent = \u0026#34;foobar\u0026#34; 14 identifier = \u0026#34;foobar-divider\u0026#34; 15 weight = 2 16 [main.params] 17 divider = true 18[[main]] 19 name = \u0026#34;Bar\u0026#34; 20 identifier = \u0026#34;bar\u0026#34; 21 parent = \u0026#34;foobar\u0026#34; 22 url = \u0026#34;https://github.com/razonyang/hugo-theme-bootstrap/discussions/new\u0026#34; 23 weight = 3 如图所示，我们创建一个名为 foobar 的顶级菜单，其包含了子菜单和分隔符。\nFront Matter\r我们也可以通过页面的 Front Matter 配置菜单。\n1[menu.main] 2 parent = \u0026#34;support\u0026#34; 3 weight = 6 4[menu.footer] 5 parent = \u0026#34;support\u0026#34; 6 weight = 6 7 pre = \u0026#39;\u0026lt;i class=\u0026#34;fas fa-fw fa-quetion-circle\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026#39; 代码片段将页面追加到 main 和 footer 菜单。\n 不需要指定 url 和 name 参数。\n","date":"2021-12-16","img":"","permalink":"/zh-cn/posts/menu/","series":["文档"],"tags":["主菜单","页脚菜单"],"title":"菜单"},{"categories":["FAQ"],"content":"FAQ\r页面是一个常见问题的集合。\n前置条件\r我们需要在 content 目录下创建一个名为 faq/index.md 的页面。\n1+++ 2title = \u0026#34;Frequently Asked Questions\u0026#34; 3layout = \u0026#34;faq\u0026#34; 4+++ 数据\r数据存放在 data 目录，其目录结构如下：\n1data 2 /en 3 /faq 4 foo.json 5 bar.json 6 /zh-cn 7 /faq 8 foo.json 9 bar.json 如你所看到的，我们按照语言对问题进行归类。每个文件代表一组问题，它们有着以下相同的格式：\n1{ 2 \u0026#34;title\u0026#34;: \u0026#34;The group title\u0026#34;, 3 \u0026#34;weight\u0026#34;: 1, 4 \u0026#34;questions\u0026#34;: [ 5 { 6 \u0026#34;question\u0026#34;: \u0026#34;The question\u0026#34;, 7 \u0026#34;answer\u0026#34;: \u0026#34;The answer\u0026#34; 8 } 9 ] 10}  weight 参数用于将组按升序排序。 ","date":"2021-12-07","img":"","permalink":"/zh-cn/posts/faq/","series":["文档"],"tags":[],"title":"FAQ 页面"},{"categories":[],"content":"本文将介绍如何安装、升级本主题，以及书写新的文章。\n安装\r从头开始创建站点\r1$ hugo new site myblog 2$ cd myblog 3$ git init 4$ git submodule add https://github.com/razonyang/hugo-theme-bootstrap themes/hugo-theme-bootstrap 5$ cp -a themes/hugo-theme-bootstrap/exampleSite/* . 6$ hugo server  如果你使用的是 Windows，请改用 xcopy .\\themes\\hugo-theme-bootstrap\\exampleSite /E。\n 安装到已有站点\r1$ cd myblog 2$ git submodule add https://github.com/razonyang/hugo-theme-bootstrap themes/hugo-theme-bootstrap 3$ mkdir config 4$ cp -a themes/hugo-theme-bootstrap/exampleSite/config/* ./config 5$ cp -r themes/hugo-theme-bootstrap/exampleSite/content/about/ \\ 6 themes/hugo-theme-bootstrap/exampleSite/content/archives/ \\ 7 themes/hugo-theme-bootstrap/exampleSite/content/categories/ \\ 8 themes/hugo-theme-bootstrap/exampleSite/content/contact/ \\ 9 themes/hugo-theme-bootstrap/exampleSite/content/offline/ \\ 10 themes/hugo-theme-bootstrap/exampleSite/content/search/ \\ 11 themes/hugo-theme-bootstrap/exampleSite/content/series/ \\ 12 themes/hugo-theme-bootstrap/exampleSite/content/tags/ \\ 13 ./content 14$ hugo server  如果你重新克隆仓库，你将需要通过 git submodule update --init --recursive 更新 submodule，或者 git clone --recursive \u0026lt;repo\u0026gt;。\n 升级\r1$ cd themes/hugo-theme-bootstrap 2$ git fetch 3$ git checkout [version] 4$ cd ../../ 5$ git add themes/hugo-theme-bootstrap 6$ git commit -m \u0026#39;Upgrade the theme\u0026#39;  将 [version] 替换为最新的版本。所有版本可以通过命令 git tag -l | sort -rV 列出。 你也可以直接使用 master 分支以获取最新的修改。  书写文章\r 假设默认语言为 en。\n 1$ hugo new posts/new-post/index.md 上述命令创建了一篇英文文章，同样的，我们也可以创建一篇简体中文的文章：\n1$ hugo new posts/new-post/index.zh-cn.md  请注意：创建的文章一般处于草稿状态，本地预览时，hugo server 需要指定 -D 参数才能预览草稿文章。文章发布时，需要将 draft 改为 false，或者直接移除 draft 参数。\n  你可以将文章放在任何地方，比如 blog，只需要将 blog 附加到 mainSections 参数：mainSections = [\u0026quot;posts\u0026quot;, \u0026quot;blog\u0026quot;]。\n 下一步\r 调整配置\r 菜单\r 观感\r ","date":"2021-12-04","img":"","permalink":"/zh-cn/posts/getting-started/","series":["文档"],"tags":["安装","升级"],"title":"快速入门"},{"categories":["图片查看器"],"content":"Image viewer is an image gallery, it will be shown up when you click a non-linkable image.\nIt also provides many tools, such as zoom in, zoom out and rotate.\n The author avatar was filtered by default.\n Site Parameters\rImage Viewer was turned on by default, you can turn it off by setting the parameter viewer as false.\nOptions\rYou can tweak the options by creating assets/js/viewer.config.js.\n1window.viewerOptions = { 2 className: \u0026#34;image-viewer\u0026#34;, 3 // ... 4}; Avialable options are listed on Viewer.js Options\r.\n","date":"2021-12-03","img":"","permalink":"/zh-cn/posts/image-viewer/","series":["文档"],"tags":[],"title":"图片查看器"},{"categories":[],"content":"默认情况下，使用此主题的站点具有默认字体、颜色和总体外观。但是，默认方案不可能满足所有人的要求，但是不要担心，你可以轻松地覆盖主题默认值，例如调色板颜色、字体、语法高亮。\n调色板\r主题的调色板系统基于 CSS 变量，因此，我们可以轻松地为每个调色板自定义颜色。\n我们以一个例子进行说明。\n1[data-palette=blue] { 2 --hbs-primary: darkblue; 3 --hbs-on-primary: #fff; 4} 在 assets/css/custom.css 追加样式后，blue 调色板的颜色将会变成 darkblue。\n字体\rFont Family\r我们不指定任何字体，所以大部分浏览器将会使用 system-ui 。\n你也可以轻易地使用其他 web 字体，比如 Google Fonts\r。我们以 Roboto 字体为例。\n首先，我们通过 customCSS 导入字体：\n1customCSS = [ 2 \u0026#34;https://fonts.googleapis.com/css2?family=Roboto\u0026amp;display=swap\u0026#34; 3] 然后在 assets/css/custom.css 覆盖 --hbs-body-font-family 变量：\n1:root { 2 --hbs-body-font-family: \u0026#39;Roboto\u0026#39;, sans-serif; 3} 语法高亮\r本主题要求以下参数设置为特定值。\n lineNos: true lineNumbersInTable: false noClasses: false  另外可参阅 Configure Highlight\r。\n样式\r1$ hugo gen chromastyles --style=solarized-dark \u0026gt; assets/css/highlight.css 另外可参阅所有支持的样式\r。\n图标\r为了减少图标的文件大小，我们使用自定义的 Font Awesome\r图标集。 正因如此，你可以自由地选择其他图标。\nFont Awesome\r自定义构建\r 本章节包含前端技术，比如 JavaScript 和 npm。\n 我们提供一个名为 assets/icons/index.js 的文件，以便自定义图标，因此，你可以按需添加图标。 我们已为你在示例站点设置好了构建环境。\n 安装依赖  1$ npm install 在 src/icons/index.js 添加图标：  1import { faGlobe, faClock } from \u0026#39;@fortawesome/free-solid-svg-icons\u0026#39;; 2 3library.add(faGlobe, faClock); 重建 assets/js/icons.js：  1$ npm run build 如果你熟悉前端开发，推荐使用此方法添加图标。\nCustomJS\r因为本主题使用 JS+SVG 框架以替换图标为 SVG，所以 customCSS 将会无效，你需要使用 customJS 替代。\n1customJS = [ 2 \u0026#34;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/js/solid.min.js\u0026#34; # Import solid icons. 3 #\u0026#34;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/js/regular.min.js\u0026#34; # Import regular icons. 4 #\u0026#34;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/js/brands.min.js\u0026#34; # Import brand icons. 5 #\u0026#34;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/js/all.min.js\u0026#34; # Import the full icon set. 6] 其他\r其他图标可以通过 customCSS，customJS 或 钩子\r导入。\n Iconify\r Bootstrap Icons\r Material Design Icons\r ","date":"2021-12-03","img":"","permalink":"/zh-cn/posts/look-and-feel/","series":["文档"],"tags":["颜色","调色板","字体","语法高亮","图标"],"title":"观感"},{"categories":["PWA"],"content":"PWAs(渐进式 web 应用程序\r) 是使用一些特定的技术和标准模式开发的，允许它们同时利用 web 和本机应用程序功能。\n我们正处于 PWA 的实验阶段，但添加了一些主要功能，如将站点安装到主屏幕、预缓存文件和离线可用。\n站点配置\r首先，我们需要指定 pwa 参数，即使为空。\n   名称 类型 默认值 描述     pwa Object -    pwa.manifest Object - Web app manifest\r   pwa.manifest.name String - 默认为站点标题   pwa.manifest.short_name String - 站点短名称   pwa.manifest.display String standalone    pwa.manifest.description String - 默认为站点描述   pwa.manifest.theme_color String -    pwa.manifest.background_color String -    pwa.manifest.icons Arrary -    pwa.manifest.icons.sizes String - 图标尺寸，如：\u0026ldquo;96x96\u0026rdquo;   pwa.manifest.icons.src String - 图标 URL    Manifest\r接着，我们在配置文件中添加一个名为 MANIFEST 的自定义输出格式，以便让我们的站点可安装。\n1[mediaTypes] 2 [mediaTypes.\u0026#34;application/manifest+json\u0026#34;] 3 suffixes = [\u0026#34;json\u0026#34;] 4 5[outputFormats] 6 [outputFormats.MANIFEST] 7 name = \u0026#34;manifest\u0026#34; 8 baseName = \u0026#34;manifest\u0026#34; 9 mediaType = \u0026#34;application/manifest+json\u0026#34; 然后在 home 输出追加 MANIFEST。\n1[outputs] 2 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;, \u0026#34;MANIFEST\u0026#34;]  Hugo 会在站点根目录生成 manifest.json。\n 离线\r如果在没有网络的情况下请求新页面，将显示脱机页面。\n我们需要在 content 目录中创建一个名为 offline/index.md 的脱机页面，其首要内容如下。\n1+++ 2title = \u0026#39;Offline\u0026#39; 3layout = \u0026#39;offline\u0026#39; 4+++ 预载\r目前，我们还没有提供任何预缓存自定义文件的方法。 如果您需要此功能，请随时通知我们。\n","date":"2021-12-03","img":"","permalink":"/zh-cn/posts/pwa/","series":["文档"],"tags":["Manifest","离线","预载"],"title":"渐进式 Web 应用程序"},{"categories":["归档"],"content":"归档页面按照年份对文章进行归档。\n前置条件\r我們需要在 content 目錄下創建一個名為 archives/_ index.md 的檔案。\n1+++ 2title = \u0026#34;归档\u0026#34; 3layout = \u0026#34;archive\u0026#34; 4+++ Site Parameters\r   名称 类型 默认值 描述     archive Object - Archive.   archive.paginate Integer 100 Archive pagination.   archive.dateFormat Integer Jan 2 Archive date format.   ","date":"2021-12-03","img":"","permalink":"/zh-cn/posts/archives/","series":["文档"],"tags":[],"title":"归档页面"},{"categories":["搜索"],"content":"如果您的站点中有许多文章，读者可能很难检索到文章，因此，我们添加了搜索功能。\n前置条件\r首先，我们需要在配置文件的 home 输出格式中追加 JSON。\n1[outputs] 2 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;]  此步骤生成一个索引文件 index.json，以便 JavaScript 可以检索内容。\n 然后，在 content 目录下创建一个名为 search/_index.md 的页面。\n1+++ 2title = \u0026#34;Search\u0026#34; 3layout = \u0026#34;search\u0026#34; 4+++ 站点参数\r   名称 类型 默认值 描述     search Object - 搜索配置。   search.paginate Integer 10 分页。   search.resultContentWordCount Integer 240 搜索结果内容最大字数。   search.fuse Object - Fuse.js 参数\r   search.fuse.ignoreLocation Boolean true    search.fuse.location Integer -    search.fuse.isCaseSensitive Boolean -    search.fuse.minMatchCharLength Integer -    search.fuse.threshold Double -    search.fuse.distance Integer -    search.fuse.useExtendedSearch Boolean -    ","date":"2021-12-03","img":"","permalink":"/zh-cn/posts/search/","series":["文档"],"tags":[],"title":"搜索页面"},{"categories":["小部件"],"content":"作者小部件位于侧边栏，用于简要地自我介绍。\n站点配置\r默认地，配置文件位于 config/_default/author.toml。 你可以通过移除 author 配置禁用小部件。\n   名称 类型 默认值 描述     author Object - 个人档案。   author.name String - 名称。   author.avatar String images/profile.webp 头像。   author.bio String - 简介。   author.company String - 公司。   author.location String - 地理位置。   author.about String - “关于我”的外部页面，如果未设置，则使用内部的“关于我”的页面。   author.params Object -    author.params.layout String - 可选值：compact。   author.social Object - 社交链接\r。   ","date":"2021-12-03","img":"","permalink":"/zh-cn/posts/widgets/author/","series":["文档"],"tags":[],"title":"作者小部件"},{"categories":["小部件"],"content":"打赏小部件，又称 buy me a coffee 小部件，其通过使用捐赠或小费，为读者提供了一种支持创作者的管道。\n站点配置\rreward 参数是从平台映射到二维码图像的键值对，因此支持任何支持二维码的平台。\n   名称 类型 默认值 描述     reward Object - 打赏。   reward.alipay String - 支付宝收款二维码图片。   reward.wechat String - 微信收款/打赏二维码图片。    页面配置\r   名称 类型 默认值 描述     reward Boolean true 是否开启打赏   ","date":"2021-12-03","img":"","permalink":"/zh-cn/posts/widgets/reward/","series":["文档"],"tags":[],"title":"打赏小部件"},{"categories":["社交链接"],"content":"社交链接 social 参数是一组平台映射到用户标识的键值对。 其支持很多热门的社交平台，比如 Twitter、Facebook、Reddit、GitHub。 本文列出了所有受支持的平台，及其使用方法。\n使用方法\r一共有两处地方可以放置社交链接，一个是作者小部件\r，另一个是页脚。\n作者小部件\r编辑 config/_default/author.toml 文件，并填写以下配置：\n1[social] 2 email = \u0026#34;user@domain.tld\u0026#34; 3 github = \u0026#34;githubusername\u0026#34; 页脚\r创建 config/_default/social.toml 文件，并填写以下配置：\n1email = \u0026#34;user@domain.tld\u0026#34; 2github = \u0026#34;githubusername\u0026#34; 平台\r   平台 用户标识     email 电子邮箱   facebook Facebook 用户名   facebookgroup Facebook 群组名   github GitHub 用户名   gitlab GitLab 用户名   instagram Instagram 用户名   linkedin LinkedIn 用户名   quora Quora 用户名   stackoverflow Stack Overflow 用户 ID   tumblr Tumblr 用户名   twitter Twitter 用户名   weibo 微博用户名   zhihu 知乎用户名   reddit Reddit 用户名   telegram Telegram 用户名   qq QQ 号   dockerhub Docker Hub 用户名   bitbucket Bitbucket Workspace ID   kaggle Kaggle 用户名   medium Medium 用户名或自定义域名（比如：https://custom.domain.tld）   lastfm Last.fm 用户名   bibibili BiliBili 用户 ID   youtube Youtube 频道 ID   discord Discord 邀请码   discourse 论坛 URL   tiktok TikTok 用户名   pinterest Pinterest 用户名   ","date":"2021-12-02","img":"","permalink":"/zh-cn/posts/widgets/social-links/","series":["文档"],"tags":[],"title":"社交链接"},{"categories":["联系表单"],"content":"我们可以将邮件地址放在 社交链接\r上，以便读者联系我们。但不幸的是，邮件或多或少会被当成垃圾邮件，甚至被过滤。因此我们带来了一个联系表单的功能。\n前置条件\r我们需要在 content 目录创建一个名为 contact/index.md 的页面，以至于我们可以访问联系表单页面。\n1+++ 2title = \u0026#34;Contact Us\u0026#34; 3layout = \u0026#34;contact\u0026#34; 4+++ 一旦创建，链接将出现在简介小部件中。\n参数\r   名称 类型 默认值 说明     contact Object -    contact.endpoint String - 请参阅 后端\r。   contact.file Boolean false 开启/禁用文件上传。   contact.fileField String - 文件字段名称。    后端\r其被设计成可以兼容大部分后端，比如：Netlify form\r、Getform\r和 Formspree\r。\nNetlify\rNetlify form\r可开箱即用，因此，你无需指定 contact.endpoint 参数。\n 演示站点使用 Getform 而不是 Netlify form，因为当你超过当前套餐限定时， Netlify 会自动升级你的套餐，这会导致额外的支出。\n  如果你打算使用 Netlify form，请确保 contact.endpoint 参数为空。\n 其他\r我们以 Getform\r为例：\n1[contact] 2 endpoint = \u0026#34;YOUR_ENDPOINT\u0026#34; ","date":"2021-11-30","img":"","permalink":"/zh-cn/posts/contact-form/","series":["文档"],"tags":["Netlify","Getform"],"title":"联系表单"},{"categories":["资源"],"content":"作为一个可定制的主题，其提供了定制资源的能力，无论是定制 CSS 和 JS，还是引入第三方 CSS 和 JS。\n内部资源\r你只需要创建和編輯 assets/css/custom.css 和 assets/js/custom.js 即可。\n 这些文件会被打包成单个 CSS/JS 文件，以减少 HTTP 的请求次数。\n 外部资源\r任意的 CSS 和 JS 资源都可以通过 customCSS 和 customJS 参数进行引入。\n1customCSS = [ 2 \u0026#34;external-foo.css\u0026#34;, 3 \u0026#34;external-bar.css\u0026#34; 4] 5 6customJS = [ 7 \u0026#34;external-foo.js\u0026#34;, 8 \u0026#34;external-bar.js\u0026#34; 9] ","date":"2021-11-28","img":"","permalink":"/zh-cn/posts/custom-assets/","series":["文档"],"tags":["CSS","JS"],"title":"自定义资源"},{"categories":["钩子"],"content":"作为一个灵活的主题，它应该能够自定义代码和集成第三方服务。因此，我们带来了一个叫做钩子的特性。\n在本文中，我们将介绍所有钩子并提供一些用例。\n总览\r   钩子 描述     head-end \u0026lt;head\u0026gt; 结束之前   body-end \u0026lt;body\u0026gt; 结束之前   main-begin \u0026lt;main\u0026gt; 上方   main-end \u0026lt;main\u0026gt; 下方   list-begin 文章列表上方   list-end 文章列表下方   sidebar-begin 侧边栏上方   sidebar-end 侧边栏下方   content-begin 文章内容上方   content-end 文章内容下方   comments-begin 评论上方   comments-end 评论下方   footer-begin footer 上方   footer-end footer 下方   post-panel-begin 文章工具栏上方   post-panel-end 文章工具栏下方    用法\r使用钩子很容易，你需要做的是在 layouts/partials/hooks 目录中创建一个与钩子同名的 HTML 文件。\n以 sidebar-begin 为例：\n1echo \u0026#39;\u0026lt;section class=\u0026#34;row card component text-center\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt;SIDEBAR BEGIN\u0026lt;/div\u0026gt;\u0026lt;/section\u0026gt;\u0026#39; \\ 2 \u0026gt; layouts/partials/hooks/sidebar-begin.html ","date":"2021-11-27","img":"","permalink":"/zh-cn/posts/hooks/","series":["文档"],"tags":[],"title":"钩子"},{"categories":[],"content":"我们很乐意倾听你的意见和反馈，也欢迎你参与进来。\n社区\r 特性请求\r Bug 反馈\r 讨论\r: 提问题、分享想法等。  贡献\r欢迎任何贡献，如文档、Bug 修复和新功能。\n规则\r鉴于易于维护的考虑，我们制定了一些规则。\nConventional Commits Specification\r请遵循 Conventional Commits Specification\r。\n比如：\n Bug 修复：fix: correct typos 新特性：feat: add the foobar parameter 文档：docs: document the foobar parameter 样式：style: change the background color to blue 重建资源：chore: rebuild assets  开发\r本主题依赖 npm 和 webpack，用于生成资源文件：JS、CSS、字体等。\n 其源码放在 src 目录。\n 安装依赖\r1$ npm install 重建资源\r1$ npm run build  npm run watch 会在文件改动时重建资源。\n 预览\r1$ npm run serve ","date":"2021-11-27","img":"","permalink":"/zh-cn/posts/get-involved/","series":["文档"],"tags":[],"title":"参与我们"},{"categories":["评论","小部件"],"content":"Disqus\r和 Utterances\r评论小部件都是开箱即用的。本文将展示如何配置它们，甚至自定义你自己的评论小部件。\nDisqus\rDisqus\r评论小部件由 Hugo 提供支持。\n1disqusShortname = \u0026#34;yourdiscussshortname\u0026#34;  请注意：disqusShortname 是站点配置，而非参数。将其放在 params 是行不通的。\n Utterances\rUtterances\r是一个基于 GitHub issue 的轻量级的评论挂件。\n1[utterances] 2 repo = \u0026#34;user/repo\u0026#34; 3 #issueTerm = \u0026#34;pathname\u0026#34; # pathname, url, title, og:title. 4 #label = \u0026#34;comment\u0026#34; # Optional. 5 #theme = \u0026#34;\u0026#34;  不同于 Disqus，Utterances 是一个参数。请将其放置在 params。\n 参数\r   名称 类型 默认值 描述     utterances.repo String - GitHub 仓库。   utterances.issueTerm String pathname 文章和 issue 之间的映射： pathname   utterances.label String - 此标签将会分配给 Utterances 创建的 issue。   utterances.theme String - 如果未设置任何主题，亮色和暗色模式会分别使用 github-light 和 github-dark。 可选值： github-light, github-dark, preferred-color-scheme, github-dark-orange, icy-dark, dark-blue 和 photon-dark。    故障排查\r 确保仓库是公开的，否则读者无法查看评论。 确保仓库已经安装了 utterances app\r，否则用户无法发表评论。 如果你的仓库是克隆的，请在设置中确保已经启用了 issues 功能。  自定义评论小部件\r我们不打算支持所有的评论小部件，但别担心，你完全可以自定义评论小部件。\n 在创建自己的评论小部件之前，需要禁用其他评论小部件。\n 1mkdir -p layouts/partials/post/comments 2echo \u0026#34;MY COMMENTS WIDGET\u0026#34; \u0026gt; layouts/partials/post/comments/custom.html 期间，你很可能需要引入第三方资源，不过这可以通过 自定义资源\r或 钩子\r轻松解决。\n","date":"2021-11-27","img":"","permalink":"/zh-cn/posts/widgets/comments/","series":["文档"],"tags":["Disqus","Utterances"],"title":"评论小部件"},{"categories":["配置"],"content":"如示例站点所示，我们使用 Configuration Directory\r为了维护更简单的组织和特定于环境的设置，它在多语言站点上特别有用。\n站点配置\r 站点配置文件默认为 config/_default/config.toml。\n    名称 类型 默认值 说明     title String - 站点标题   baseURL String - 站点 URL   copyright String - 站点版权。{year} 占位符会被替换为当前年份。   defaultContentLanguage String en    defaultContentLanguageInSubdir Boolean false    paginate Integer 10    paginatePath String page    enableRobotsTXT Boolean true    disqusShortname String - Disqus\rshortname。   googleAnalytics String - Google Analytics.   social Object - 社交链接\r。   author Object - 作者小部件\r。    请参阅 All Configuration Settings\r。\n站点参数\r 站点参数文件默认为 config/_default/params.toml。\n    名称 类型 默认值 说明     Page      mainSections Array [\u0026quot;posts\u0026quot;] 主要的 sections   titleCase Boolean false 标题首字母是否大写   titleSeparator String - 标题分隔符   comment Boolean true 是否开启评论   toc Boolean true 是否开启目录   tocWordCount Integer 280 仅当文章的字数超过此值时，才会显示目录。   breadcrumb Boolean true 是否开启面包屑导航   dateFormat String Jan 2, 2006 日期格式。 查阅 Hugo Date and Time Templating Reference\r以获取详细信息。   poweredBy Boolean true 是否显示技术支持。   readingTime Boolean true 是否显示阅读时间   postDate Boolean true 是否显示发表日期   math Boolean false 是否开启 math。   diagram Boolean false 是否开启 diagram。   logo String/Boolean images/logo.webp Logo。设置为 false 以禁用 Logo。   brand String - Brand   description String - 站点描述   keywords String - 站点关键词   color String - 颜色风格， light，dark 或者 dynamic（默认）。   palette String - 默认配色，清理 Cookie 后生效。   palettes Array ALL 可选配色，如需禁用此选项，可将其设为空值 []。   featuredPostCount Integer/Boolean 5 精选文章数，false 则隐藏。   recentPostCount Integer/Boolean 5 最近文章数，false 则隐藏。   relatedPostCount Integer/Boolean 5 相关文章数，false 则隐藏。   categoryCount Integer/Boolean 10 分类数，false 则隐藏。   tagCount Integer/Boolean 10 标签数，false 则隐藏。   seriesCount Integer/Boolean 10 专栏数，false 则隐藏。   taxonomyPaginate Integer 10    taxonomyPostCount Integer 3 分类的列表文章数，false 则隐藏。   countTaxonomyPosts Boolean false 显示分类的文章总数。   fullWidth Boolean false 是否全宽   fixedHeader Boolean true 是否固定头部   reward Object - 打赏小部件\r，又称 Buy Me a Coffee 小部件。   share Object - 分享按钮   share.addThis String - AddThis\rpubid。   fontSize Object 字体大小 注释或删除此参数可以禁用字体大小切换器。   fontSize.small String .9rem 小字体   fontSize.extraSmall String .8rem 更小的字体   fontSize.large String 1.1rem 大字体   fontSize.extraLarge String 1.2rem 更大的字体   socialShare Boolean true 启用/禁用内置的分享按钮   searchBar Boolean true 启用/禁用搜索栏   Archive      archive Object - 归档\r。   search Object - 搜索\r。   Webmaster Site Verification      siteVerification Object -    siteVerification.google String - Google   siteVerification.bing String - Bing   siteVerification.baidu String - 百度   siteVerification.baiduUnion String - 百度联盟   siteVerification.so String - 360   siteVerification.sogou String - 搜狗   siteVerification.shenma String - 神马   Analytics      analytics Object - Analytics.   analytics.baidu String - 百度统计   Others      googleAdsense String - Google Adsense。   customCSS Array - 自定义 CSS， 主要用于导入外部。 请查阅自定义资源\r。   customJS Array - 自定义 JS， 主要用于导入外部 JS。 请查阅自定义资源\r。   utterances Object - Utterances\r配置。   Creative Commons License      creativeCommons Object -    creativeCommons.by Boolean true 署名   creativeCommons.nc Boolean true 非商业   creativeCommons.nd Boolean true 禁止演绎   creativeCommons.sa Boolean true 相同方式共享   Code Block      codeBlock Object -    codeBlock.maxLines Integer 7    codeBlock.lineNos Boolean true true/false 表示默认情况下显示/隐藏行号。   Post      post Object -    post.excerpt String Summary 可选项：description   post.excerptMaxLength Integer 320    viewer Boolean true 图片查看器\r   pwa Object - 渐进式 web 应用\r   Meta Tag      metaRobots String - 空字符串表示禁用。   contact Object - 联系表单\r   pinnedPost Boolean true 开启/禁用文章置顶。   pinnedPostCount Integer 1 置顶的文章数量。     除了 Google 站长工具外，其他搜索引擎站长工具无法与 hugo --minify 同时使用，这是因为它们无法识别优化后的元标签。\n 页面参数\r 页面参数位于 Front Matter\r。\n    名称 类型 默认值 说明     Page      description String - 页面描述   keywords Array - 页面关键词   comment Boolean true 是否开启评论，如果评论已被全局关闭，该参数无效   toc Boolean true 是否开启目录，如果目录已被全局关闭，该参数无效   math Boolean false 是否开启 math   diagram Boolean false 是否开启 diagram   reward Boolean true 是否开启打赏   breadcrumb Boolean true 是否开启面包屑导航   readingTime Boolean true 是否显示阅读时间   postDate Boolean true 是否显示发表日期   Creative Commons License      creativeCommons Object -    creativeCommons.by Boolean true 署名   creativeCommons.nc Boolean true 非商业   creativeCommons.nd Boolean true 禁止演绎   creativeCommons.sa Boolean true 相同方式共享   Meta Tag      metaRobots String - 空字符串表示禁用。   pinned Boolean false 置顶文章。   ","date":"2021-11-27","img":"","permalink":"/zh-cn/posts/configuration/","series":["文档"],"tags":[],"title":"配置概览"},{"categories":["Markdown"],"content":"本文提供一些调整图片大小和对齐图片的用例。\n调整图片大小\r我们利用 URL 的查询字符串来调整图片大小。\n指定宽度和保留比率\r1![Resize](images/sample.png?width=300px) \r指定高度和保留比率\r1![Resize](images/sample.png?height=200px) \r指定宽度和高度\r1![Resize](images/sample.png?width=300px\u0026amp;height=200px)  它不仅可以用于页面资源\r，而且也适用于 static 图像和外部图像。 但是，除了页面资源外，其他资源的大小都是按内联样式调整的，也就是说，它们的原始大小不会改变。\n 对齐图像\r我们可以利用 URL 片段轻易地对齐图像，比如：#center, #floatleft 和 #floatright 分别表示居中对齐、向左浮动和向右浮动。\n居中对齐\r添加 #center 使图片居中对齐。\n举个例子：![Center](/images/center.png#center)。\n向左浮动\r添加 #floatleft 使图片向左浮动。\n举个例子：![Float Left](/images/left.png#floatleft)。\n向右浮动\r同样的，我们也可以添加 #floatright 使图片向右浮动。\n举个例子：![Float Right](/images/right.png#floatright)。\n","date":"2021-08-15","img":"/zh-cn/posts/image-processing/images/center.png","permalink":"/zh-cn/posts/image-processing/","series":["文档"],"tags":["图像"],"title":"图像处理"},{"categories":[],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings\rThe following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1\rH2\rH3\rH4\rH5\rH6\rParagraph\rXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes\rThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution\r Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution\r Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables\rTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables\r   Italics Bold Code     italics bold code    Code Blocks\rCode block with backticks\r1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode\r1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;Another Example HTML5 Document\u0026lt;/title\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;p\u0026gt;A looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong text\u0026lt;/p\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; List Types\rOrdered List\r First item Second item Third item  Unordered List\r List item Another item And another item  Nested List\r Fruit  Apple Orange Banana   Dairy  Milk Cheese    TODO List\r Done WIP  Other Elements — abbr, sub, sup, kbd, mark\rGIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk\rduring Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2020-11-09","img":"/images/markdown.png","permalink":"/zh-cn/posts/markdown-syntax/","series":["文档"],"tags":["Markdown","CSS","HTML"],"title":"Markdown 语法指南"},{"categories":null,"content":"","date":"0001-01-01","img":"","permalink":"/zh-cn/offline/","series":null,"tags":null,"title":"Offline"},{"categories":null,"content":"","date":"0001-01-01","img":"","permalink":"/zh-cn/faq/","series":null,"tags":null,"title":"常见问题"},{"categories":null,"content":"","date":"0001-01-01","img":"","permalink":"/zh-cn/contact/","series":null,"tags":null,"title":"联系我们"}]